#ip 2
0:  addi 2 16 2 # jump to initialize variables

1:  seti 1 5    # v[5] = 1
LOOP 1
    2:  seti 1 3    # v[3] = 1
    LOOP 2
        3:  mulr 5 3 4  # v[4] = v[5] * v[3]
        4:  eqrr 4 1 4  # v[4] = v[4] == v[1]
        5:  addr 4 2 2  # ip += V[4]
        6:  addi 2 1 2  # ip++
            7:  addr 5 0 0  # v[0] = v[5] + v[0]
        8:  addi 3 1 3  # v[3]++
        9:  gtrr 3 1 4  # v[4] = v[3] > v[1]
        10: addr 2 4 2  # ip += v[4]
        11: seti 2 2    # jmp LOOP 2
    12: addi 5 1 5  # v[5]++
    13: gtrr 5 1 4  # v[4] = V[5] > v[1]
    14: addr 4 2 2  # terminate if v[5] > v[1]
    15: seti 1 2    # jmp LOOP 1

16: mulr 2 2 2  # terminate ip = ip * ip (moves out)

# initialize variables
17: addi 1 2 1  # v[1] = v[1] + 2
18: mulr 1 1 1  # v[1] = v[1] * v[1]
19: mulr 2 1 1  # v[1] = ip(19) * v[1]
20: muli 1 11 1 # v[1] = v[1] * 11
21: addi 4 3 4  # v[4] = v[4] + 3
22: mulr 4 2 4  # v[4] = v[4] * ip(22)
23: addi 4 7 4  # v[4] = v[4] + 7
24: addr 1 4 1  # v[1] = v[1] + v[4]
25: addr 2 0 2  # ip += v[0]
26: seti 0 2    # ip = 0            # skipping this since v[0] was 1
27: setr 2 4    # v[4] = ip(27)
28: mulr 4 2 4  # v[4] = v[4] * ip(28)
29: addr 2 4 4  # v[4] = ip(29) + v[4]
30: mulr 2 4 4  # v[4] = ip(30) * v[4]
31: muli 4 14 4 # v[4] = v[4] + 14
32: mulr 4 2 4  # v[4] = v[4] * ip(32)
33: addr 1 4 1  # v[1] = v[1] + v[4]
34: seti 0 0    # v[0] = 0
35: seti 0 2    # ip = 0